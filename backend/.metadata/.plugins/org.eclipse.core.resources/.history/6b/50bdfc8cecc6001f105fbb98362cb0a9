package com.indus.training.microservice.impl;

import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.indus.training.microservice.dao.AuthService;
import com.indus.training.microservice.dto.UserDto;
import com.indus.training.microservice.entity.Status;
import com.indus.training.microservice.entity.UserPrinciple;
import com.indus.training.microservice.entity.Users;
import com.indus.training.microservice.exception.AuthException;
import com.indus.training.microservice.repo.UserRepo;

@Service
public class UserService implements AuthService {

	@Autowired
	public UserRepo userRepo;

	@Autowired
	AuthenticationManager manager;

	@Autowired
	private JWTService jwtService;

	private BCryptPasswordEncoder encoder = new BCryptPasswordEncoder(12);

	@Override
	public Boolean insert(Users user) throws AuthException {

		if (user == null) {
			throw new AuthException("User object cannot be null.");
		}

		if (user.getEmail() == null || user.getEmail().isEmpty()) {
			throw new AuthException("Email cannot be null or empty.");
		}

		if (user.getUsername() == null || user.getUsername().isEmpty()) {
			throw new AuthException("Username cannot be null or empty.");
		}

		// Existing user validation
		Users existingUser = userRepo.findByEmail(user.getEmail());
		if (existingUser != null) {
			throw new AuthException("Email " + user.getEmail() + " already exists.");
		}

		// Unique username validation
		Users existingUserByUsername = userRepo.findByUsername(user.getUsername());
		if (existingUserByUsername != null) {
			throw new AuthException("User with Username " + user.getUsername() + " already exists.");
		}

		// Assign defaults and encode password
		if (user.getRole() == null || user.getRole().isEmpty()) {
			user.setRole("user");
		}
		user.setPassword(encoder.encode(user.getPassword()));

		user.setCreatedAt(new Date());
		user.setLastLogin(new Date());
		user.setStatus(Status.active);
		userRepo.insert(user);

		return true;

	}

	@Override
	public UserDto getByEmail(String email) throws AuthException {
		if (email == null || email.isEmpty()) {
			throw new AuthException("Email cannot be null or empty.");
		}

		Users user = userRepo.findByEmail(email);
		if (user == null) {
			throw new AuthException("No user found with email: " + email);
		}

		return new UserDto(user.getUsername(), user.getEmail(), user.getLastLogin());
	}

//	@Override
//	public String verify(Users user) throws AuthException {
//		// TODO Auto-generated method stub
//		if (user == null) {
//			throw new AuthException("User object cannot be null.");
//		}
//
//		if (user.getUsername() == null || user.getUsername().isEmpty()) {
//			throw new AuthException("Username cannot be null or empty.");
//		}
//
//		if (user.getPassword() == null || user.getPassword().isEmpty()) {
//			throw new AuthException("Password cannot be null or empty.");
//		}
//
//		try {
//			Authentication authentication = manager
//					.authenticate(new UsernamePasswordAuthenticationToken(user.getUsername(), user.getPassword()));
//
//			if (authentication.isAuthenticated()) {
//				if (user.getLastLogin() == null) {
//					user.setLastLogin(new Date());
//				}
//				return jwtService.generateToken(user.getUsername(), user.getRole());
//			}
//		} catch (Exception ex) {
//			throw new AuthException("Invalid username or password.");
//		}
//		return "fail";
//	}

	@Override
	public String verify(Users user) throws AuthException {
		if (user == null) {
			throw new AuthException("User object cannot be null.");
		}

		if (user.getUsername() == null || user.getUsername().isEmpty()) {
			throw new AuthException("Username cannot be null or empty.");
		}

		if (user.getPassword() == null || user.getPassword().isEmpty()) {
			throw new AuthException("Password cannot be null or empty.");
		}

		try {
			Authentication authentication = manager
					.authenticate(new UsernamePasswordAuthenticationToken(user.getUsername(), user.getPassword()));

			if (authentication.isAuthenticated()) {
				// Extract UserPrinciple from Authentication
				UserPrinciple userPrinciple = (UserPrinciple) authentication.getPrincipal();
				String role = userPrinciple.getAuthorities().iterator().next().getAuthority();

				if (user.getLastLogin() == null) {
					user.setLastLogin(new Date());
				}

				// Generate token with username and role
				return jwtService.generateToken(userPrinciple.getUsername(), role);
			}
		} catch (Exception ex) {
			throw new AuthException("Invalid username or password.");
		}
		return "fail";
	}

}
